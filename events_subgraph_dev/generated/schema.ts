// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AdminUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("oldAdmin", Value.fromBytes(Bytes.empty()));
    this.set("newAdmin", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AdminUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AdminUpdated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AdminUpdated", id.toString(), this);
    }
  }

  static load(id: string): AdminUpdated | null {
    return changetype<AdminUpdated | null>(store.get("AdminUpdated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldAdmin(): Bytes {
    let value = this.get("oldAdmin");
    return value!.toBytes();
  }

  set oldAdmin(value: Bytes) {
    this.set("oldAdmin", Value.fromBytes(value));
  }

  get newAdmin(): Bytes {
    let value = this.get("newAdmin");
    return value!.toBytes();
  }

  set newAdmin(value: Bytes) {
    this.set("newAdmin", Value.fromBytes(value));
  }
}

export class ImplementationUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("oldImplementation", Value.fromBytes(Bytes.empty()));
    this.set("newImplementation", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ImplementationUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ImplementationUpdated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ImplementationUpdated", id.toString(), this);
    }
  }

  static load(id: string): ImplementationUpdated | null {
    return changetype<ImplementationUpdated | null>(
      store.get("ImplementationUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldImplementation(): Bytes {
    let value = this.get("oldImplementation");
    return value!.toBytes();
  }

  set oldImplementation(value: Bytes) {
    this.set("oldImplementation", Value.fromBytes(value));
  }

  get newImplementation(): Bytes {
    let value = this.get("newImplementation");
    return value!.toBytes();
  }

  set newImplementation(value: Bytes) {
    this.set("newImplementation", Value.fromBytes(value));
  }
}

export class PendingImplementationUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("oldPendingImplementation", Value.fromBytes(Bytes.empty()));
    this.set("newPendingImplementation", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PendingImplementationUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PendingImplementationUpdated entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PendingImplementationUpdated", id.toString(), this);
    }
  }

  static load(id: string): PendingImplementationUpdated | null {
    return changetype<PendingImplementationUpdated | null>(
      store.get("PendingImplementationUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldPendingImplementation(): Bytes {
    let value = this.get("oldPendingImplementation");
    return value!.toBytes();
  }

  set oldPendingImplementation(value: Bytes) {
    this.set("oldPendingImplementation", Value.fromBytes(value));
  }

  get newPendingImplementation(): Bytes {
    let value = this.get("newPendingImplementation");
    return value!.toBytes();
  }

  set newPendingImplementation(value: Bytes) {
    this.set("newPendingImplementation", Value.fromBytes(value));
  }
}
